mathCurveReddit = [
[800, 770, 750, 730, 710, 700, 680, 670, 660, 650],
[800, 790, 770, 750, 730, 720, 700, 690, 680, 670],
[800, 780, 770, 750, 730, 720, 710, 690, 680, 670],
[800, 790, 780, 770, 760, 750, 740, 730, 720, 710],
[800, 780, 760, 740, 730, 710, 700, 690, 680, 670],
[800, 790, 780, 770, 750, 740, 720, 710, 700, 690],
[800, 790, 780, 760, 750, 730, 720, 710, 700, 700],
[800, 790, 780, 760, 750, 730, 720, 710, 700, 700],
[800, 790, 780, 760, 750, 730, 720, 700, 690, 680],
[800, 790, 780, 760, 750, 730, 720, 700, 690, 680],
[800, 790, 780, 770, 750, 740, 730, 720, 700, 690],
[800, 790, 770, 760, 740, 720, 710, 690, 680, 680],
[800, 790, 780, 770, 750, 740, 720, 710, 700, 690],
[800, 790, 780, 770, 760, 750, 730, 720, 710, 700],
[800, 800, 790, 780, 770, 760, 740, 730, 720, 700]
]
readingCurveReddit = [
[400, 390, 380, 370, 370, 360, 350, 340, 340, 330],
[400, 390, 390, 380, 370, 370, 360, 350, 350, 340],
[400, 390, 390, 380, 370, 360, 350, 340, 340, 330],
[400, 400, 390, 380, 370, 360, 350, 350, 340, 330],
[400, 400, 390, 380, 370, 360, 360, 350, 340, 330],
[400, 390, 380, 380, 370, 360, 350, 350, 340, 340],
[400, 400, 390, 380, 380, 370, 360, 350, 340, 340],
[400, 390, 380, 370, 360, 350, 350, 340, 330, 320],
[400, 400, 400, 390, 390, 380, 370, 360, 350, 350],
[400, 400, 390, 380, 380, 370, 360, 350, 340, 340],
[400, 400, 390, 380, 370, 360, 360, 350, 340, 340],
[400, 400, 390, 380, 370, 360, 350, 350, 340, 330],
[400, 400, 390, 380, 370, 360, 350, 350, 340, 330],
[400, 400, 390, 390, 380, 370, 370, 360, 350, 350],
[400, 400, 390, 380, 380, 370, 360, 350, 340, 340]
]
writingCurveReddit = [
[400, 390, 370, 360, 350, 340, 330, 320, 310, 310],
[400, 380, 360, 350, 340, 330, 320, 310, 310, 300],
[400, 390, 380, 370, 360, 350, 340, 330, 330, 320],
[400, 390, 380, 360, 350, 340, 340, 330, 320, 320],
[400, 390, 380, 360, 350, 340, 340, 330, 320, 310],
[400, 390, 380, 370, 360, 350, 340, 340, 330, 330],
[400, 390, 380, 370, 360, 350, 340, 330, 330, 320],
[400, 390, 380, 370, 360, 350, 340, 330, 330, 320],
[400, 400, 390, 380, 370, 360, 350, 340, 330, 330],
[400, 390, 370, 360, 350, 340, 340, 330, 330, 320],
[400, 390, 380, 370, 360, 350, 350, 340, 340, 330],
[400, 400, 390, 380, 360, 350, 350, 340, 330, 320],
[400, 390, 380, 370, 360, 350, 340, 330, 330, 320],
[400, 390, 380, 370, 360, 350, 340, 330, 330, 320],
[400, 390, 380, 360, 350, 340, 340, 330, 320, 320]
]
mathCurveDatabase = [
[800, 790, 780, 770, 760, 740, 730, 720, 710, 700, 690, 680, 670, 670, 660, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 540, 530, 530, 520, 510, 510, 500, 490, 470, 460, 450, 440, 430, 420, 410, 400, 390, 380, 360, 350, 340, 330, 320, 310, 290, 280, 260, 250, 230, 210, 200, 200], 
[800, 790, 770, 760, 750, 730, 720, 710, 710, 700, 690, 680, 670, 660, 660, 650, 640, 630, 620, 610, 600, 600, 590, 580, 570, 560, 550, 540, 540, 530, 520, 510, 510, 500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400, 390, 370, 360, 340, 330, 320, 300, 290, 270, 260, 250, 230, 210, 200, 200], 
[800, 790, 770, 760, 740, 730, 720, 700, 690, 680, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 550, 540, 530, 530, 520, 510, 510, 500, 490, 480, 470, 460, 450, 440, 430, 430, 420, 400, 390, 380, 370, 360, 350, 330, 320, 310, 290, 280, 260, 250, 230, 210, 200, 200], 
[800, 800, 800, 790, 790, 780, 770, 750, 740, 730, 710, 700, 690, 680, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 580, 580, 570, 560, 550, 540, 540, 530, 520, 520, 510, 500, 490, 480, 470, 460, 450, 440, 430, 420, 400, 390, 380, 360, 350, 340, 320, 300, 290, 270, 250, 240, 220, 210, 200], 
[800, 800, 790, 780, 770, 750, 740, 730, 720, 710, 700, 690, 680, 670, 660, 650, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 540, 540, 530, 520, 520, 510, 500, 490, 480, 470, 460, 450, 440, 430, 420, 400, 390, 380, 360, 350, 340, 320, 310, 290, 280, 260, 250, 230, 220, 210, 200], 
[800, 790, 780, 770, 750, 740, 730, 720, 710, 700, 690, 680, 670, 660, 650, 640, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 550, 540, 530, 530, 520, 510, 510, 500, 490, 480, 470, 450, 440, 430, 420, 410, 390, 380, 370, 350, 340, 330, 310, 300, 290, 270, 260, 240, 230, 210, 200, 200], 
[800, 800, 790, 790, 780, 760, 750, 740, 720, 710, 700, 690, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 550, 540, 530, 520, 520, 510, 500, 490, 480, 470, 460, 450, 440, 420, 410, 400, 390, 380, 370, 360, 340, 330, 320, 310, 290, 280, 260, 250, 230, 220, 210, 200], 
[800, 800, 790, 790, 780, 770, 750, 740, 720, 710, 700, 690, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 580, 570, 560, 560, 550, 540, 530, 530, 520, 510, 510, 500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400, 380, 370, 360, 350, 340, 330, 310, 300, 280, 270, 250, 230, 220, 210, 200], 
[800, 800, 790, 790, 780, 770, 750, 740, 730, 710, 700, 690, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 540, 530, 530, 520, 510, 510, 500, 490, 480, 470, 460, 450, 440, 430, 410, 400, 390, 380, 360, 350, 340, 330, 320, 300, 290, 270, 260, 240, 230, 220, 210, 200], 
[800, 800, 790, 770, 760, 740, 730, 710, 700, 690, 680, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 540, 530, 520, 520, 510, 500, 490, 480, 470, 460, 450, 440, 440, 430, 420, 400, 390, 380, 370, 360, 350, 340, 330, 320, 310, 290, 280, 260, 250, 230, 220, 210, 200], 
[800, 790, 770, 750, 730, 710, 700, 690, 680, 670, 660, 650, 640, 630, 620, 610, 610, 600, 590, 580, 580, 570, 560, 550, 540, 540, 530, 520, 520, 510, 500, 500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400, 390, 380, 370, 360, 350, 340, 320, 310, 300, 280, 270, 250, 230, 220, 210, 200, 200], 
[800, 790, 770, 760, 740, 730, 720, 700, 690, 680, 670, 670, 660, 650, 640, 630, 620, 610, 600, 600, 590, 580, 570, 570, 560, 550, 540, 540, 530, 520, 520, 510, 500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400, 380, 370, 360, 350, 340, 320, 310, 300, 290, 270, 260, 240, 230, 220, 200, 200], 
[800, 790, 780, 770, 750, 740, 720, 710, 700, 690, 680, 670, 660, 650, 640, 630, 620, 610, 600, 590, 590, 580, 570, 560, 550, 550, 540, 530, 530, 520, 510, 510, 500, 490, 480, 470, 460, 450, 430, 420, 410, 400, 390, 370, 360, 350, 340, 330, 310, 300, 290, 280, 260, 250, 240, 220, 210, 200, 200],
[800, 780, 770, 750, 740, 720, 710, 700, 690, 680, 670, 660, 650, 640, 630, 620, 610, 600, 600, 590, 580, 580, 570, 560, 550, 550, 540, 530, 530, 520, 510, 510, 500, 490, 480, 470, 460, 450, 440, 420, 410, 400, 390, 380, 360, 350, 340, 330, 320, 310, 290, 280, 270, 250, 240, 230, 210, 200, 200]
]
readingCurveDatabase = [
[400, 400, 390, 380, 370, 370, 360, 350, 340, 330, 330, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 220, 210, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 150, 150, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 370, 370, 360, 350, 350, 340, 330, 330, 320, 320, 310, 310, 300, 300, 290, 290, 290, 280, 280, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 180, 180, 170, 170, 160, 160, 150, 140, 140, 130, 120, 110, 110, 100, 100, 100, 100], 
[400, 390, 390, 380, 370, 370, 360, 350, 350, 340, 330, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 220, 210, 210, 200, 200, 190, 180, 180, 170, 170, 160, 150, 150, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 380, 370, 360, 350, 350, 340, 330, 330, 320, 310, 310, 300, 300, 290, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 220, 210, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 150, 150, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 390, 380, 370, 370, 360, 360, 350, 350, 340, 340, 330, 330, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 250, 250, 240, 240, 230, 220, 220, 210, 200, 200, 190, 190, 180, 170, 170, 160, 150, 150, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 400, 390, 390, 390, 380, 380, 370, 360, 350, 340, 340, 330, 320, 320, 310, 310, 300, 300, 290, 280, 280, 270, 270, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 150, 150, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 380, 380, 370, 360, 360, 350, 350, 340, 340, 330, 330, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 230, 230, 220, 220, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100], 
[400, 390, 390, 380, 370, 360, 360, 350, 340, 340, 330, 330, 320, 310, 310, 300, 300, 290, 290, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 220, 220, 210, 210, 200, 200, 190, 190, 190, 180, 180, 170, 160, 160, 150, 140, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 390, 380, 380, 370, 360, 360, 350, 340, 340, 330, 330, 320, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 180, 180, 170, 160, 150, 150, 140, 130, 120, 110, 100, 100, 100], 
[400, 400, 390, 390, 380, 370, 370, 360, 350, 350, 340, 340, 330, 330, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 180, 180, 170, 170, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100], 
[400, 390, 370, 360, 360, 350, 340, 330, 330, 320, 320, 310, 310, 310, 300, 300, 290, 290, 280, 280, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 220, 210, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 390, 380, 370, 360, 350, 350, 340, 330, 330, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 190, 180, 180, 180, 170, 160, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100], 
[400, 390, 380, 370, 360, 350, 340, 340, 330, 320, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 190, 190, 180, 180, 170, 170, 160, 150, 150, 140, 130, 130, 120, 110, 100, 100, 100, 100],
[400, 400, 390, 390, 380, 380, 370, 360, 350, 340, 340, 330, 320, 320, 310, 310, 300, 300, 290, 280, 280, 270, 270, 260, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 150, 140, 140, 130, 120, 110, 100, 100, 100]
]
writingCurveDatabase = [
[400, 390, 390, 380, 360, 360, 350, 340, 340, 330, 320, 310, 310, 300, 300, 290, 280, 280, 270, 270, 260, 250, 250, 240, 230, 230, 220, 210, 200, 200, 190, 180, 180, 170, 160, 160, 150, 140, 130, 120, 110, 110, 100, 100, 100], 
[400, 400, 390, 380, 370, 360, 350, 340, 340, 330, 320, 320, 310, 300, 300, 290, 280, 280, 270, 260, 250, 250, 240, 230, 230, 220, 210, 200, 200, 190, 180, 180, 170, 160, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 370, 360, 360, 350, 340, 340, 330, 320, 320, 310, 310, 300, 290, 290, 280, 270, 260, 260, 250, 250, 240, 230, 220, 220, 210, 200, 190, 190, 180, 180, 170, 160, 150, 150, 140, 130, 120, 120, 110, 100, 100, 100, 100], 
[400, 390, 380, 370, 360, 350, 340, 330, 330, 320, 310, 310, 300, 290, 290, 280, 270, 270, 260, 250, 250, 240, 240, 230, 220, 220, 210, 210, 200, 190, 190, 180, 170, 170, 160, 150, 140, 140, 130, 120, 110, 100, 100, 100, 100], 
[400, 390, 380, 360, 350, 350, 340, 330, 330, 320, 310, 310, 300, 300, 290, 290, 280, 270, 270, 260, 260, 250, 250, 240, 230, 230, 220, 220, 210, 200, 200, 190, 180, 180, 170, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100], 
[400, 390, 390, 380, 370, 360, 350, 340, 340, 330, 330, 320, 310, 310, 300, 300, 290, 290, 280, 270, 270, 260, 250, 250, 240, 230, 220, 220, 210, 200, 190, 180, 180, 170, 160, 160, 150, 140, 130, 120, 110, 110, 100, 100, 100], 
[400, 390, 380, 370, 360, 350, 350, 340, 330, 330, 320, 310, 310, 300, 290, 290, 280, 270, 270, 260, 260, 250, 240, 240, 230, 220, 220, 210, 210, 200, 190, 190, 180, 170, 160, 160, 150, 140, 130, 120, 120, 110, 100, 100, 100], 
[400, 390, 370, 360, 350, 340, 340, 330, 330, 320, 310, 310, 300, 300, 290, 290, 280, 280, 270, 270, 260, 260, 250, 240, 240, 230, 230, 220, 210, 210, 200, 190, 190, 180, 170, 160, 160, 150, 140, 130, 120, 110, 100, 100, 100], 
[400, 390, 380, 370, 360, 350, 340, 340, 330, 330, 320, 320, 310, 300, 300, 290, 280, 280, 270, 270, 260, 250, 250, 240, 230, 230, 220, 210, 210, 200, 200, 190, 180, 170, 170, 160, 160, 150, 140, 130, 120, 110, 100, 100, 100], 
[400, 390, 390, 370, 360, 350, 350, 340, 330, 330, 320, 310, 310, 300, 290, 290, 280, 280, 270, 270, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 180, 170, 170, 160, 150, 140, 130, 120, 110, 100, 100, 100], 
[400, 380, 360, 340, 330, 320, 310, 310, 300, 290, 290, 280, 270, 270, 260, 250, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 190, 180, 180, 180, 170, 170, 160, 160, 150, 140, 140, 130, 120, 110, 110, 100, 100, 100], 
[400, 390, 380, 370, 350, 350, 340, 330, 320, 320, 310, 300, 290, 290, 280, 280, 270, 260, 260, 250, 240, 240, 230, 230, 220, 220, 210, 210, 200, 190, 190, 180, 180, 170, 160, 160, 150, 140, 130, 120, 120, 110, 100, 100, 100], 
[400, 380, 360, 340, 330, 320, 310, 310, 300, 290, 290, 280, 280, 270, 260, 260, 250, 240, 240, 230, 230, 220, 220, 210, 210, 200, 200, 190, 190, 180, 180, 170, 170, 160, 160, 150, 150, 140, 130, 120, 110, 110, 100, 100, 100],
[400, 390, 380, 379, 360, 350, 340, 330, 330, 320, 310, 310, 300, 290, 290, 280, 280, 270, 260, 260, 250, 240, 240, 230, 230, 220, 210, 210, 200, 200, 190, 180, 180, 170, 160, 160, 150, 140, 130, 130, 120, 110, 100, 100, 100]
]
percentiles = [
    99.9826, 99.9411, 99.8413, 99.7354, 99.5923, 99.4276, 99.1397, 98.9104, 98.6515, 98.3528, 97.8469, 97.4642, 97.0358, 96.5559, 96.0276, 95.7529, 95.1588, 94.5099, 93.7955, 93.412, 92.6195, 91.7854, 91.3402, 89.9012, 89.3846, 88.8429, 87.7155, 86.5287, 85.9086, 84.6085, 83.9373, 82.5362, 81.0451, 80.2791, 78.6945, 77.877, 76.1735, 75.3036, 73.4994, 72.5711, 70.6719, 68.7169, 67.7098, 65.6533, 64.5884, 62.4244, 61.3263, 59.078, 57.9348, 55.6413, 53.2926, 52.1009, 49.7397, 48.5449, 46.1566, 44.9528, 42.5425, 41.3276, 38.9328, 36.5401, 35.3573, 33.0214, 31.8637, 29.5865, 28.4646, 27.3632, 25.1993, 24.1399, 22.0875, 21.0863, 19.1715, 18.2462, 16.4691, 15.6303, 14.0277, 13.2678, 11.8273, 11.1387, 9.8699, 9.2785, 8.1716, 7.1558, 6.6918, 5.8385, 5.4509, 4.7419, 4.4099, 3.812, 3.2731, 3.0288, 2.5786, 2.3712, 1.9942, 1.8196, 1.6576, 1.5043, 1.3616, 1.2274, 1.1014, 0.9862, 0.8816, 0.7862, 0.6972, 0.615, 0.5381, 0.4663, 0.4022, 0.4022, 0.343, 0.2897, 0.243, 0.2014, 0.1642, 0.1312, 0.1047, 0.0831, 0.0651, 0.0484, 0.0365, 0.0278, 0.0112
]

def getValues(database, redditdatabase, score) :
    localdatabase = list(database)
    if (score < 10 and score != '') :
        localdatabase = localdatabase + redditdatabase
    else:
        localdatabase = localdatabase
    
    data = [0]*61
    for item in localdatabase:
        data[int((item[score]-200)/10)] = data[int((item[score]-200)/10)]+1 / len(localdatabase)  * 100

    for i in range(len(data)):
        if data[i]>0:
            cutoff = i
            break
        cutoff = len(data)

    #/* Filter zero values */
    data = list(filter(lambda num: num != 0, data))
    #/* Index = median */
    index = cutoff+round(len(data)/2)
    #/* Score calculation */
    lables = [0]*len(data)
    if (score!='') :
        for i in range(len(data)):
            lables[i] = (index-round(len(data)/2)+i)*10+200     
    
    return lables,data


def init(r,w,m):
    rs, rv = getValues(readingCurveDatabase, readingCurveReddit, r)
    ws, wv = getValues(writingCurveDatabase, readingCurveReddit, w)
    ms, mv = getValues(mathCurveDatabase, mathCurveReddit, m)
    ts, tv = calculateProbability(rs,rv,ws,wv,ms,mv)
    #print(ts,tv)
    middle = tv.index(max(tv))
    print('top score',ts[middle])

    probsum = tv[middle]
    for i in reversed(range(middle)):
        probsum = probsum + tv[2*middle - i]
        if probsum>80:
            print('Your score range at a',round(probsum),'% confidence level:',(ts[middle]-(middle-i-1)*10),'-',(ts[middle]+(middle-i)*10))
            break
        probsum = probsum + tv[i]
        if (probsum>80):
            print('Your score range at a',round(probsum),'% confidence level:',(ts[middle]-(middle-i-1)*10),'-',(ts[middle]+(middle-i)*10))
            break
    
    persentile = percentiles[120-int((ts[middle]-400)/10)]
    print("You are better than",persentile,"% of test takers!")
    
    try:
        print('Sending reply')
        if type(parent) == type(mention):
            parent.refresh()
            print('parent text',parent.author.name)
            mention.reply('Hey, u/'+mention.author.name+' and u/'+parent.author.name+'! According to [SAT Score Calculator](https://wegotomars.github.io/sat_calculator), based on prior tests, your median score is '+str(ts[middle])+'. Your score range at a '+str(round(probsum))+'% confidence level is '+str(ts[middle]-(middle-i-1)*10)+'-'+str(ts[middle]+(middle-i)*10)+'. Details are available at https://wegotomars.github.io/sat_calculator/?r='+str(r)+'&w='+str(w)+'&m='+str(m)+". \n \n ^(Disclaimer: Score calculator doesn't have any curves before score release day, this prediction is only a rough statistical estimation)")
        else:
            mention.reply('Hey, u/'+mention.author.name+'! According to [SAT Score Calculator](https://wegotomars.github.io/sat_calculator), based on prior tests, your median score is '+str(ts[middle])+'. Your score range at a '+str(round(probsum))+'% confidence level is '+str(ts[middle]-(middle-i-1)*10)+'-'+str(ts[middle]+(middle-i)*10)+'. Details are available at https://wegotomars.github.io/sat_calculator/?r='+str(r)+'&w='+str(w)+'&m='+str(m)+".\n \n ^(Disclaimer: Score calculator doesn't have any curves before score release day, this prediction is only a rough statistical estimation)")
    except Exception as e: print(e)

def calculateProbability(rs,rv,ws,wv,ms,mv): 
    #/* Find total probabilty */
    res={}
    for a in range(len(rs)):
        for b in range(len(ws)):
            for c in range(len(ms)):
                finalscore = rs[a] + ws[b] +ms[c]
                prob =  rv[a] * wv[b] * mv[c] / 10000
                try:
                    q = res[finalscore]
                except:
                    res[finalscore] = 0
                finally:
                    prev = res[finalscore]
                    res[finalscore] = prev + prob
    return list(res), list(res.values())

import praw
import time
import os

reddit = praw.Reddit(
    client_id=os.environ['client_id'],
    client_secret=os.environ['client_secret'],
    password=os.environ['password'],
    user_agent=os.environ['user_agent'],
    username=os.environ['username'],
)

while True:
    for mention in reddit.inbox.mentions(limit=10):
        text = mention.body
        print('Mention text',text)
        rpos = max(text.find('r'),text.find('reading'),text.find('R'),text.find('Reading'))
        wpos = max(text.find('w'),text.find('writing'),text.find('W'),text.find('Writing'))
        mpos = max(text.find('m'),text.find('math'),text.find('M'),text.find('Math'))
        pos = sorted([rpos,wpos,mpos,len(text)])
        
        r = ''.join(ch for ch in text[rpos:pos[pos.index(rpos)+1]] if ch.isnumeric())
        #print(text[rpos:pos[pos.index(rpos)+1]])
        w = ''.join(ch for ch in text[wpos:pos[pos.index(wpos)+1]] if ch.isnumeric())
        #print(text[wpos:pos[pos.index(wpos)+1]])
        m = ''.join(ch for ch in text[mpos:pos[pos.index(mpos)+1]] if ch.isnumeric())
        #print(text[mpos:pos[pos.index(mpos)+1]])

        print('Extracted data, r, w, m',r,w,m)

        try:
            mention.refresh()
        except:
            time.sleep(20)
            mention.refresh()
        answered = False
        for comment in mention.replies:
            if comment.author.name == 'satcalc':
                answered = True
                print('Answered')

        parent = mention.parent()
        if type(parent) == type(mention):
            parent.refresh()
            print('parent text',parent.author.name)

        if not answered:
            try:
                print()
                init(int(r),int(w),int(m))
            except:
                pass
    print()
    time.sleep(60)


